#!/usr/bin/python3



# -------- IMPORTATIONS --------

#system
import os, sys






# -------- DECLARATIONS --------

#current executable directory
CXD = os.path.realpath(os.path.dirname(sys.argv[0]))
pCXD     = os.path.dirname(CXD)

#paths
SRC_DIR     = pCXD + "/src"
DST_DIR     = pCXD + "/out/src"
DST_FILE    = DST_DIR + "/operators.n"
DST_FILE_FP = DST_DIR + "/operators.n.cfg" #fp






# -------- TOOLS --------

#errors
def err(msg, code=1):
	print("genOperators: " + msg)
	exit(code)






# -------- TOOLS --------

#get each file in a dir recursively
def fse__getTree(dir, ignoreHidden=True):
	res = []
	for fseName in os.listdir(dir):

		#hidden file
		if ignoreHidden:
			if fseName[0] == '.':
				continue

		#full path
		fseFullPath = dir + '/' + fseName

		#dir => add its content recursively
		if os.path.isdir(fseFullPath):
			res += fse__getTree(fseFullPath)

		#else, simply add it
		else:
			res.append(fseFullPath)
	return res

def catFullTreeIntoDst(srcDir):
	for filePath in fse__getTree(srcDir):
		os.system("cat "       + filePath + " >> " + DST_FILE)

		#also store first line in fp
		os.system("head -n 1 " + filePath + "| sed 's@{@;@' >> " + DST_FILE_FP)






# -------- INITIALIZATION --------

#get arch type
arch_subdir = "arch32"
if len(sys.argv) < 2:
	err("Missing arch type 32 or 64 as 1st argument.")
if sys.argv[1] == "64":
	arch_subdir = "arch64"
elif sys.argv[1] != "32":
	err("Invalid value \"" + sys.argv[1] + "\" given as arch type (expected \"32\" or \"64\").", 2)






# -------- EXECUTION --------

#create dst dir
if not os.path.isdir(os.path.abspath(DST_DIR)):
	os.makedirs(DST_DIR)

#copy generic content
catFullTreeIntoDst(SRC_DIR + "/gnc")

#add specific content (32/64)
catFullTreeIntoDst(SRC_DIR + '/' + arch_subdir)
